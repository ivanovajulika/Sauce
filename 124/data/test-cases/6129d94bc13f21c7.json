{"uid":"6129d94bc13f21c7","name":"test_should_be_menu_sidebar","fullName":"tests.test_sidebar#test_should_be_menu_sidebar","historyId":"ce5b7357562ae8c7154eed8f1fe64e71","time":{"start":1669624492321,"stop":1669624493795,"duration":1474},"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button id=\"react-burger-cross-btn\" tabindex=\"0\" style=\"position: absolute; left: 0px; top: 0px; z-index: 1; width: 100%; height: 100%; margin: 0px; padding: 0px; border: none; font-size: 0px; background: transparent; cursor: pointer;\">...</button> is not clickable at point (60, 28). Other element would receive the click: <div class=\"bm-menu\" style=\"height: 100%; box-sizing: border-box; overflow: auto;\">...</div>\n  (Session info: headless chrome=107.0.5304.110)\nStacktrace:\n#0 0x5608c8fc5463 <unknown>\n#1 0x5608c8d898d8 <unknown>\n#2 0x5608c8dcf23b <unknown>\n#3 0x5608c8dcca79 <unknown>\n#4 0x5608c8dc9fe4 <unknown>\n#5 0x5608c8dc8b21 <unknown>\n#6 0x5608c8dbb421 <unknown>\n#7 0x5608c8de8622 <unknown>\n#8 0x5608c8dbaba7 <unknown>\n#9 0x5608c8de878e <unknown>\n#10 0x5608c8e0130f <unknown>\n#11 0x5608c8de8443 <unknown>\n#12 0x5608c8db93c5 <unknown>\n#13 0x5608c8dba531 <unknown>\n#14 0x5608c9017dce <unknown>\n#15 0x5608c901b192 <unknown>\n#16 0x5608c8ffc93e <unknown>\n#17 0x5608c901c103 <unknown>\n#18 0x5608c8fefd85 <unknown>\n#19 0x5608c903d0a8 <unknown>\n#20 0x5608c903d239 <unknown>\n#21 0x5608c9058492 <unknown>\n#22 0x7f4d7f0c6609 start_thread","statusTrace":"browser = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"45ec8651ab11f404c8599f0023b67818\")>\n\n    @allure.feature(\"US_011.00 | Sidebar\")\n    @allure.story(\"TC_011.01.01 | Sidebar > Работа Sidebar на странице 'Products'\")\n    def test_should_be_menu_sidebar(browser):\n        page = InventoryPage(browser, link)\n>       page.should_be_menu_sidebar()\n\ntests/test_sidebar.py:17: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/base_page.py:68: in should_be_menu_sidebar\n    self.browser.find_element(*CROSS_BTN).click()\n../../../.cache/pypoetry/virtualenvs/sauce-NlGQ8SHG-py3.10/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:93: in click\n    self._execute(Command.CLICK_ELEMENT)\n../../../.cache/pypoetry/virtualenvs/sauce-NlGQ8SHG-py3.10/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:410: in _execute\n    return self._parent.execute(command, params)\n../../../.cache/pypoetry/virtualenvs/sauce-NlGQ8SHG-py3.10/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:444: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f0fae005d50>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...wn>\\\\n#20 0x5608c903d239 \\\\u003Cunknown>\\\\n#21 0x5608c9058492 \\\\u003Cunknown>\\\\n#22 0x7f4d7f0c6609 start_thread\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = \"{}.{}\".format(frame[\"className\"], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button id=\"react-burger-cross-btn\" tabindex=\"0\" style=\"position: absolute; left: 0px; top: 0px; z-index: 1; width: 100%; height: 100%; margin: 0px; padding: 0px; border: none; font-size: 0px; background: transparent; cursor: pointer;\">...</button> is not clickable at point (60, 28). Other element would receive the click: <div class=\"bm-menu\" style=\"height: 100%; box-sizing: border-box; overflow: auto;\">...</div>\nE         (Session info: headless chrome=107.0.5304.110)\nE       Stacktrace:\nE       #0 0x5608c8fc5463 <unknown>\nE       #1 0x5608c8d898d8 <unknown>\nE       #2 0x5608c8dcf23b <unknown>\nE       #3 0x5608c8dcca79 <unknown>\nE       #4 0x5608c8dc9fe4 <unknown>\nE       #5 0x5608c8dc8b21 <unknown>\nE       #6 0x5608c8dbb421 <unknown>\nE       #7 0x5608c8de8622 <unknown>\nE       #8 0x5608c8dbaba7 <unknown>\nE       #9 0x5608c8de878e <unknown>\nE       #10 0x5608c8e0130f <unknown>\nE       #11 0x5608c8de8443 <unknown>\nE       #12 0x5608c8db93c5 <unknown>\nE       #13 0x5608c8dba531 <unknown>\nE       #14 0x5608c9017dce <unknown>\nE       #15 0x5608c901b192 <unknown>\nE       #16 0x5608c8ffc93e <unknown>\nE       #17 0x5608c901c103 <unknown>\nE       #18 0x5608c8fefd85 <unknown>\nE       #19 0x5608c903d0a8 <unknown>\nE       #20 0x5608c903d239 <unknown>\nE       #21 0x5608c9058492 <unknown>\nE       #22 0x7f4d7f0c6609 start_thread\n\n../../../.cache/pypoetry/virtualenvs/sauce-NlGQ8SHG-py3.10/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py:249: ElementClickInterceptedException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"username","time":{"start":1669624490961,"stop":1669624490961,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"password","time":{"start":1669624490961,"stop":1669624490961,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"browser","time":{"start":1669624490961,"stop":1669624492320,"duration":1359},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button id=\"react-burger-cross-btn\" tabindex=\"0\" style=\"position: absolute; left: 0px; top: 0px; z-index: 1; width: 100%; height: 100%; margin: 0px; padding: 0px; border: none; font-size: 0px; background: transparent; cursor: pointer;\">...</button> is not clickable at point (60, 28). Other element would receive the click: <div class=\"bm-menu\" style=\"height: 100%; box-sizing: border-box; overflow: auto;\">...</div>\n  (Session info: headless chrome=107.0.5304.110)\nStacktrace:\n#0 0x5608c8fc5463 <unknown>\n#1 0x5608c8d898d8 <unknown>\n#2 0x5608c8dcf23b <unknown>\n#3 0x5608c8dcca79 <unknown>\n#4 0x5608c8dc9fe4 <unknown>\n#5 0x5608c8dc8b21 <unknown>\n#6 0x5608c8dbb421 <unknown>\n#7 0x5608c8de8622 <unknown>\n#8 0x5608c8dbaba7 <unknown>\n#9 0x5608c8de878e <unknown>\n#10 0x5608c8e0130f <unknown>\n#11 0x5608c8de8443 <unknown>\n#12 0x5608c8db93c5 <unknown>\n#13 0x5608c8dba531 <unknown>\n#14 0x5608c9017dce <unknown>\n#15 0x5608c901b192 <unknown>\n#16 0x5608c8ffc93e <unknown>\n#17 0x5608c901c103 <unknown>\n#18 0x5608c8fefd85 <unknown>\n#19 0x5608c903d0a8 <unknown>\n#20 0x5608c903d239 <unknown>\n#21 0x5608c9058492 <unknown>\n#22 0x7f4d7f0c6609 start_thread","statusTrace":"browser = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"45ec8651ab11f404c8599f0023b67818\")>\n\n    @allure.feature(\"US_011.00 | Sidebar\")\n    @allure.story(\"TC_011.01.01 | Sidebar > Работа Sidebar на странице 'Products'\")\n    def test_should_be_menu_sidebar(browser):\n        page = InventoryPage(browser, link)\n>       page.should_be_menu_sidebar()\n\ntests/test_sidebar.py:17: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/base_page.py:68: in should_be_menu_sidebar\n    self.browser.find_element(*CROSS_BTN).click()\n../../../.cache/pypoetry/virtualenvs/sauce-NlGQ8SHG-py3.10/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:93: in click\n    self._execute(Command.CLICK_ELEMENT)\n../../../.cache/pypoetry/virtualenvs/sauce-NlGQ8SHG-py3.10/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:410: in _execute\n    return self._parent.execute(command, params)\n../../../.cache/pypoetry/virtualenvs/sauce-NlGQ8SHG-py3.10/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:444: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f0fae005d50>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...wn>\\\\n#20 0x5608c903d239 \\\\u003Cunknown>\\\\n#21 0x5608c9058492 \\\\u003Cunknown>\\\\n#22 0x7f4d7f0c6609 start_thread\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = \"{}.{}\".format(frame[\"className\"], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button id=\"react-burger-cross-btn\" tabindex=\"0\" style=\"position: absolute; left: 0px; top: 0px; z-index: 1; width: 100%; height: 100%; margin: 0px; padding: 0px; border: none; font-size: 0px; background: transparent; cursor: pointer;\">...</button> is not clickable at point (60, 28). Other element would receive the click: <div class=\"bm-menu\" style=\"height: 100%; box-sizing: border-box; overflow: auto;\">...</div>\nE         (Session info: headless chrome=107.0.5304.110)\nE       Stacktrace:\nE       #0 0x5608c8fc5463 <unknown>\nE       #1 0x5608c8d898d8 <unknown>\nE       #2 0x5608c8dcf23b <unknown>\nE       #3 0x5608c8dcca79 <unknown>\nE       #4 0x5608c8dc9fe4 <unknown>\nE       #5 0x5608c8dc8b21 <unknown>\nE       #6 0x5608c8dbb421 <unknown>\nE       #7 0x5608c8de8622 <unknown>\nE       #8 0x5608c8dbaba7 <unknown>\nE       #9 0x5608c8de878e <unknown>\nE       #10 0x5608c8e0130f <unknown>\nE       #11 0x5608c8de8443 <unknown>\nE       #12 0x5608c8db93c5 <unknown>\nE       #13 0x5608c8dba531 <unknown>\nE       #14 0x5608c9017dce <unknown>\nE       #15 0x5608c901b192 <unknown>\nE       #16 0x5608c8ffc93e <unknown>\nE       #17 0x5608c901c103 <unknown>\nE       #18 0x5608c8fefd85 <unknown>\nE       #19 0x5608c903d0a8 <unknown>\nE       #20 0x5608c903d239 <unknown>\nE       #21 0x5608c9058492 <unknown>\nE       #22 0x7f4d7f0c6609 start_thread\n\n../../../.cache/pypoetry/virtualenvs/sauce-NlGQ8SHG-py3.10/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py:249: ElementClickInterceptedException","steps":[],"attachments":[{"uid":"865cf9b2fb434d9c","name":"screenshot","source":"865cf9b2fb434d9c.png","type":"image/png","size":498486}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[{"name":"browser::0","time":{"start":1669624494105,"stop":1669624494165,"duration":60},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"labels":[{"name":"feature","value":"US_011.00 | Sidebar"},{"name":"story","value":"TC_011.01.01 | Sidebar > Работа Sidebar на странице 'Products'"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_sidebar"},{"name":"host","value":"fv-az222-430"},{"name":"thread","value":"2801-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_sidebar"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":1,"skipped":0,"passed":1,"unknown":0,"total":2},"items":[{"uid":"b0db859bdfe8f381","reportUrl":"https://ivanovajulika.github.io/Sauce/123//#testresult/b0db859bdfe8f381","status":"passed","time":{"start":1669618260059,"stop":1669618260406,"duration":347}}]},"tags":[]},"source":"6129d94bc13f21c7.json","parameterValues":[]}